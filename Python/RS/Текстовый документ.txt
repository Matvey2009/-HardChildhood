py -V  - Проверка версии пайтон

import sys
print(sys.version)  - Проверка версии пайтон из кода

python.exe -m pip install --upgrade pip  - обнавление pip

python -m venv venv  - Cоздание локальной среды

.\venv\Scripts\activate  - Активация вертуальной среды(Должно появиться венв в скобочках)

deactivate  - Отключение вертуальной среды

pip list  - Cписок подключённых модулей

Get-ExecutionPolicy  - Проверка доступа к скриптам

Set-ExecutionPolicy AllSigned(или RemoteSigned)  - Разрешает работу скриптов

pip install Flask  - Установка фласк

py -m pip freeze  - Cписок подключённых модулей

pip freeze > requirements.txt  - Cохранение модулей в список

pip freeze -r requirements.txt  - Загружает библиотеки

gitingnore  - Добавляем github исключения для Flask, Python и VisualStudio

Создаю app.py основной файл приложения

Дальше смотреть app.py

python app.py  - Запускает сервер

control + c - выход
 
templates - папка для шаблонов

static - папка для папок css

 План действий:
 Перечислить странички которые нужны
 Расписать под них функции
 Оформить их в шаблоны
 Нормальная вёрстка
 Дизайн

pip install flask_sqlalchemy  - Модуль для работы с бд

from flask_sqlalchemy import SQLAlchemy  - подключаем модуль

app.config["SQLALCHEMY_DATABASE_URI"] = 'sqlite:///sqlite.db' - путь к бд

db = SQLAlchemy(app) - Переменная базы данных

class User(db.Model): - Расписываем классы для таблиц

Переходим в режим пайтон(>>>)
>>> from app import app, db  - Создастся папка бд
>>> app.app_context().push()
>>> db.create_all()

{% block content %}
    <h1>Пользователи</h1>
    {% if data %}
        {% for i in data %}
            <p>{{i.id}}</p>
            <p>{{i.name}}</p>
            <p>{{i.description}}</p> 
        {% endfor %}
    {% else %}
        <p>Данные отсутсвуют</p>
    {% endif %}
{% endblock %}

@app.route('/user/<int:id>')  Нужно указывания айди пользователя
"user": User.query.get(id) Нужно для указывания айди пользователя

 <a href="/user/{{i.id}}"> для вывода айди